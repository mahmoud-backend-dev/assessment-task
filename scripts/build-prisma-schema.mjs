import { promises as fs } from 'fs';
import { existsSync } from 'fs';
import { join } from 'path';

const prismaDir = join(process.cwd(), 'prisma');
const baseSchemaPath = join(prismaDir, 'schema.base.prisma');
const outputSchemaPath = join(prismaDir, 'schema.prisma');
const modelsDir = join(prismaDir, 'models');

const orderedFiles = [
  'enums.prisma',
  'user.prisma',
  'category.prisma',
  'product-category.prisma',
  'product-relations.prisma',
  'product.prisma',
  'order.prisma',
];

async function buildSchema() {
  if (!existsSync(baseSchemaPath)) {
    throw new Error(`Missing base schema file: ${baseSchemaPath}`);
  }

  const base = await fs.readFile(baseSchemaPath, 'utf8');
  const parts = [
    '// This file is generated by scripts/build-prisma-schema.mjs. Do not edit manually.\n',
    base.trim(),
    '',
  ];

  for (const file of orderedFiles) {
    const filePath = join(modelsDir, file);
    if (!existsSync(filePath)) {
      throw new Error(`Missing Prisma model file: ${filePath}`);
    }

    const content = await fs.readFile(filePath, 'utf8');
    parts.push(content.trim(), '');
  }

  const schema = parts.join('\n');
  await fs.writeFile(outputSchemaPath, schema, 'utf8');
  console.log(`✅ Prisma schema generated at ${outputSchemaPath}`);
}

buildSchema().catch(error => {
  console.error('Failed to build Prisma schema:', error);
  process.exit(1);
});
